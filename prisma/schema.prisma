generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
} 

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String    @id @default(cuid()) @map("_id")
  name                 String?
  email                String?   @unique
  emailVerified        DateTime?
  password             String?
  image                String?
  role                 String?   @default("user")
  resetToken           String?  
  resetTokenExpiry     DateTime?
  phoneNumber          String?   
  address              String?
  company              String?
  accounts             Account[]
  sessions             Session[]
  services             FreelancerService[] @relation("freelauncerService")
  contracts            Contract[] @relation("Contract")
}
 
model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String 
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FreelancerService {
  id             String   @id @default(uuid()) @map("_id")  
  name           String
  email          String   
  address        String
  state          String
  country        String
  linkedin       String?  
  phoneNumber    String   
  age            Int

  categories     String   // Can be stored as a comma-separated string or as a relation
  projectTitle   String
  projectDescription String
  url            String?  
  skills         String[]
  createdAt      DateTime @default(now())
  status         String   @default("pending") 
  amount         Float

  // Optional relationship to a User model if needed
  userId         String?
  user           User? @relation("freelauncerService", fields: [userId], references: [id], onDelete: Cascade)
  contracts      Contract[] @relation("FreelancerContracts")
  chat           Message[] @relation("contractChat")
}

model Contract {
  id             String   @id @default(uuid()) @map("_id")
  userId         String?  
  freelancerId   String   
  clientId       String   

  title          String   
  description    String   
  amount         Float    
  currency       String   @default("USD") 
  status         String   @default("pending") 

  proposals      Json?    
  agreement      Json?    
  dueDate        String?
  milestones     Milestone[] 

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  freelancer     FreelancerService @relation("FreelancerContracts", fields: [freelancerId], references: [id], onDelete: Cascade)
  user           User @relation("Contract", fields: [clientId], references: [id], onDelete: Cascade)
}


model Milestone {
  id            String   @id @default(uuid()) @map("_id") 
  contractId    String   
  description   String   
  dueDate       DateTime 
  amount        Float    
  status        String   @default("pending") 

  contract      Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

model Message {
  id             String   @id @default(uuid()) @map("_id")
  contractId     String  
  senderId       String   
  receiverId     String   
  content        String   
  createdAt      DateTime @default(now())
  freelancerId   String   

  freelancer     FreelancerService @relation("contractChat", fields: [freelancerId], references: [id], onDelete: Cascade)
}
